@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix : <http://example.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

#TODO
#I made a really crude fix for TargetNode targeting non existent Nodes... only "works" when people use applyClean.sh or have :please :apply :clean triple in their data

#some weird interaction between targetclass and implicit class targets (testcase class002)

#Max and Min Exclusive only work when the difference is above 0.00001... should change that, also check for non number literal
#also they dont work well with dates

#Min MAx length can check nunmbers for some reason... also check for notIRI and Blank



#languageIn needs check for literal

#pattern needs check for notBlankNode, and need to look into $flags

#look into lessThan and lessThanOrEquals for accuracy

#ResultSeverity can be overwritten, i just always give sh:Violation, should change that

#--------Core Constraint Components
#------Value Type Constraints
#---class
{	?shape	sh:class	?class.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i.
		("Node does not have class " ?class) string:concatenation ?message.
		_:b log:notIncludes {?i rdf:type ?class}
	} => {
		[	a								sh:ValidationResult;
			sh:resultSeverity				sh:Violation;
			sh:sourceConstraintComponent	sh:ClassConstraintComponent;
			sh:sourceShape					?shape;
			sh:focusNode					?i;
			sh:value						?i;
			sh:resultMessage				?message]
	}
}.
#---datatype 
{	?shape sh:datatype ?type.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i.
		("Node does not have datatype " ?type) string:concatenation ?message.
		(?egal ?testType) log:dtlit ?i.
		?testType log:notEqualTo ?type
	} => {
		[	a								sh:ValidationResult;
			sh:resultSeverity				sh:Violation;
			sh:sourceConstraintComponent	sh:DatatypeConstraintComponent;
			sh:sourceShape					?shape;
			sh:focusNode					?i;
			sh:value						?i;
			sh:resultMessage				?message]
	}.
	###########################################
	{	?shape :targets ?i.
		?i log:rawType log:Literal
	} => {
		?i :testDPos :lit
	}.
	##########################################
	{	?shape :targets ?i.
		("Node does not have datatype " ?type) string:concatenation ?message.
		_:b log:notIncludes {?i :testDPos :lit}
	} => {
		[	a 								sh:ValidationResult;
			sh:resultSeverity				sh:Violation;
			sh:sourceConstraintComponent	sh:DatatypeConstraintComponent;
			sh:sourceShape					?shape;
			sh:focusNode					?i;
			sh:value						?i;
			sh:resultMessage				?message]
	}
}.
#---nodeKind
{	?shape 	sh:nodeKind ?kind.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i. 
		?i log:rawType log:Literal
	} => {
		?i :testPos :lit
	}.
	###########################
	{	?shape :targets ?i. 
		?i log:rawType log:Other. 
		?i log:uri _:exists
	} => {
		?i :testPos :iri
	}.
	########################### 																		
	{	?shape :targets ?i. 
		?i log:rawType log:UnlabeledBlankNode
	} => {
		?i :testPos :bn
	}.
	##########################
	{	?shape :targets ?i. 
		?i log:rawType log:ForAll
	} => {
		?i :testPos :bn
	}.
	################################################################
	{	?shape :targets ?i. 
		?kind list:in (sh:Literal sh:BlankNodeOrLiteral sh:IRIOrLiteral). 
		?i :testPos :lit
	} => {
		?i :testPos ?kind
	}.
	#####################
	{	?shape :targets ?i. 
		?kind list:in (sh:IRI sh:BlankNodeOrIRI sh:IRIOrLiteral). 
		?i :testPos :iri
	} => {
		?i :testPos ?kind
	}.
	#####################
	{	?shape :targets ?i. 
		?kind list:in (sh:BlankNode sh:BlankNodeOrIRI sh:BlankNodeOrLiteral). 
		?i :testPos :bn
	} => {
		?i :testPos ?kind
	}.
	##################################################################
	{	?shape :targets ?i. 
		("Node does not have node kind " ?kind) string:concatenation ?message. 
		_:b log:notIncludes {?i :testPos ?kind}
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:NodeKindConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}
}.
#------Value Range Constraints
#---minInclusive
{	?shape 	sh:minInclusive ?value.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i. 
		("Node is not >= " ?value) string:concatenation ?message. 
		?i math:lessThan ?value.
		?i :testDPos :lit
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MinInclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:value 						?i;
			sh:focusNode 					?i; 
			sh:resultMessage 				?message]
	}.
	##########################
	{	?shape :targets ?i. 
		?i log:rawType log:Literal
	} => {
		?i :testDPos :lit
	}.
	##########################
	{	?shape :targets ?i. 
		("Node is not >= " ?value) string:concatenation ?message. 
		?i string:lessThan ?value.
		?i :testDPos :lit
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MinInclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:value 						?i;
			sh:focusNode 					?i; 
			sh:resultMessage 				?message]
	}.
	#########################
	{	?shape :targets ?i. 
		("Node is not >= " ?value) string:concatenation ?message. 
		_:b log:notIncludes {?i :testDPos :lit}
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MinInclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:value 						?i;
			sh:focusNode 					?i; 
			sh:resultMessage 				?message]
	}
}.	
#---maxInclusive
{	?shape 	sh:maxInclusive ?value.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i. 
		("Value is not <= " ?value) string:concatenation ?message. 
		?i math:greaterThan ?value.
		?i :testDPos :lit
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MaxInclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}.
	###########################
	{	?shape :targets ?i. 
		("Value is not <= " ?value) string:concatenation ?message. 
		?i string:greaterThan ?value.
		?i :testDPos :lit
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MaxInclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}.
	##########################
	{	?shape :targets ?i. 
		?i log:rawType log:Literal
	} => {
		?i :testDPos :lit
	}.
	#########################
	{	?shape :targets ?i. 
		("Node is not <= " ?value) string:concatenation ?message. 
		_:b log:notIncludes {?i :testDPos :lit}
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MinInclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:value 						?i;
			sh:focusNode 					?i; 
			sh:resultMessage 				?message]
	}
}.	
#---minExclusive
{	?shape 	sh:minExclusive ?value.
	_:b log:notIncludes {?shape sh:path _:egal}.
	(?value 0.00001) math:sum ?result
} => {
	{	?shape :targets ?i. 
		("Value is not > " ?value) string:concatenation ?message. 
		?i math:lessThan ?result.
		?i :testDPos :lit
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation;  
			sh:sourceConstraintComponent 	sh:MinExclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}.
	#######################
	{	?shape :targets ?i. 
		("Value is not > " ?value) string:concatenation ?message. 
		?i string:lessThan ?result.
		?i :testDPos :lit
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation;  
			sh:sourceConstraintComponent 	sh:MinExclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}.
	##########################
	{	?shape :targets ?i. 
		?i log:rawType log:Literal
	} => {
		?i :testDPos :lit
	}.
	#########################
	{	?shape :targets ?i. 
		("Node is not > " ?value) string:concatenation ?message. 
		_:b log:notIncludes {?i :testDPos :lit}
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MinInclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:value 						?i;
			sh:focusNode 					?i; 
			sh:resultMessage 				?message]
	}
}.	
#---maxExclusive
{	?shape 	sh:maxExclusive ?value.
	_:b log:notIncludes {?shape sh:path _:egal}.
	(?value -0.00001) math:sum ?result
} => {
	{	?shape :targets ?i. 
		("Value is not < " ?value) string:concatenation ?message. 
		?i math:greaterThan ?result.
		?i :testDPos :lit
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MaxExclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}.
	###########################
	{	?shape :targets ?i. 
		("Value is not < " ?value) string:concatenation ?message. 
		?i string:greaterThan ?result.
		?i :testDPos :lit
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MaxExclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}.
	##########################
	{	?shape :targets ?i. 
		?i log:rawType log:Literal
	} => {
		?i :testDPos :lit
	}.
	#########################
	{	?shape :targets ?i. 
		("Node is not < " ?value) string:concatenation ?message. 
		_:b log:notIncludes {?i :testDPos :lit}
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MinInclusiveConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:value 						?i;
			sh:focusNode 					?i; 
			sh:resultMessage 				?message]
	}
}.
#------String-based Constraints
#---minLength
{	?shape 	sh:minLength ?value.
	_:b log:notIncludes {?shape sh:path _:egal}.
	(?value -1) math:sum ?acValue. 
	("^.{0," ?acValue "}$") string:concatenation ?regex								# "^.{0,?acValue}$"
} => {
	{	?shape :targets ?i. 
		("Value has less than " ?value " characters") string:concatenation ?message. 
		?i string:matches ?regex
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MinLengthConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}
}.	 
#---maxLength
{	?shape 	sh:maxLength 	?value.
	_:b log:notIncludes {?shape sh:path _:egal}.
	(?value 1) math:sum ?acValue. 
	("^.{" ?acValue ",}$") string:concatenation ?regex								# "^.{?acValue,}$"
} => {
	{	?shape :targets ?i. 
		("Value has more than " ?value " characters") string:concatenation ?message. 
		?i string:matches ?regex
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:MaxLengthConstraintComponent; 
			sh:sourceShape 					?shape;
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}
}.	 
#---pattern
{	?shape 	sh:pattern 	?regex.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i. 
		("Node does not match pattern " ?regex) string:concatenation ?message. 
		?i string:notMatches ?regex
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:PatternConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}
}.	
#---languageIn
{	?shape 	sh:languageIn 	?list.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i. 
		(?egal ?tag) log:langlit ?i. 
		?list list:iterate (?index ?value). 
		("^(" ?value "-+.*)|(" ?value ")$") string:concatenation ?regex.				# ^(?value-+.*)|(?value)$ 
		?tag string:matches ?regex
	} => {
		?i :langPos ?list
	}.
	##############################	
	{	?shape :targets ?i. 
		("Language does not match any of " ?list) string:concatenation ?message. 
		_:b log:notIncludes {?i :langPos ?list}
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:LanguageInConstraintComponent; 
			sh:sourceShape 					?shape ;
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}
}.	
#------Property Pair Constraints #makes no sense for nodeshapes/only checks for ?value being reflexive
#---equals
{	?shape 	sh:equals 	?value.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i. 
		("Must have the same values as " ?value) string:concatenation ?message. 
		_:b log:notIncludes {?i ?value ?i}
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:EqualsConstraintComponent; 
			sh:sourceShape 					?shape;
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}.
	{	?shape :targets ?i. 
		("Must have the same values as " ?value) string:concatenation ?message. 
		?i ?value ?i.
		?i ?value ?wasAnderes.
		?wasAnderes log:notEqualTo ?i.
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:EqualsConstraintComponent; 
			sh:sourceShape 					?shape;
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}.
}.	
#---disjoint
{	?shape 	sh:disjoint ?value.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i. 
		("Value node must not also be one of the values of " ?value) string:concatenation ?message. 
		?i ?value ?i
		} => {
			[	a 								sh:ValidationResult; 
				sh:resultSeverity 				sh:Violation; 
				sh:sourceConstraintComponent 	sh:DisjointConstraintComponent; 
				sh:sourceShape 					?shape;
				sh:focusNode 					?i; 
				sh:value 						?i;
				sh:resultMessage 				?message]
	}
}.	
#------Shape-based Constraints
#---node
{	?shape 	sh:node ?vshape.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i
	} => {
		?vshape :targets ?i
	}.
	####################################
	{	?shape :targets ?i. 
		?vshape sh:property ?pShape.
		?violation 	sh:sourceShape 	?pShape; 
					sh:focusNode 	?i
	} => {
		?i ?vshape ?violation
	}.
	####################################
	{	?shape :targets ?i. 
		?vshape sh:property ?pShape.
		?i ?pShape ?violation
	} => {
		?i ?vshape ?violation
	}.
	####################################
	{	?shape :targets ?i. 
		?violation 	sh:sourceShape 	?vshape; 
					sh:focusNode 	?i
	} => {
		?i ?vshape ?violation
	}.
	###################################
	{	?shape :targets ?i. 
		("Node does not have shape " ?vshape) string:concatenation ?message. 
		?i ?vshape ?anyViolation
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:NodeConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i;
			sh:value 						?i;
			sh:resultMessage 				?message]
	}.
	##################################
	{	?shape :targets ?i. 
		("Node does not have shape " ?vshape) string:concatenation ?message. 
		?result a 					sh:ValidationResult; 
				sh:focusNode 		?i; 
				sh:resultMessage 	?message. 
		?i ?vshape ?violation
	} => {
		?result sh:detail ?violation
	}
}.
#---property
{	?shape 	sh:property ?pShape.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	?pShape :wasPChildOf ?shape.
	{	?shape 	:targets 	?i
	} => {
		?pShape :targets 	?i
	}.
	############################
	{	?shape 	:targets 	?i. 
		?violation 	sh:sourceShape 	?pShape; 
					sh:focusNode 	?i
	} => {
		?i ?pShape ?violation
	}.
	#############################
	{	?shape 	:targets 	?i.
		?pShape sh:property ?vShape.
		?i ?vShape ?violation
	} => {
		?i ?pShape ?violation
	}.
}.

#---qualified min/maxcount... need to look into this (valueshape not for NodeShapes per docs)

#---hasValue														#makes no sense for nodeshapes
{	?shape 	sh:hasValue ?value.
	_:b log:notIncludes {?shape sh:path _:egal}
	} => {
		{	?shape :targets ?i. 
			("Value must be " ?value) string:concatenation ?message. 
			?i log:notEqualTo ?value
		} => {
			[ 	a 								sh:ValidationResult; 
				sh:resultSeverity	 			sh:Violation; 
				sh:sourceConstraintComponent 	sh:HasValueConstraintComponent; 
				sh:sourceShape 					?shape;
				sh:focusNode 					?i; 
				sh:resultMessage 				?message]
		}
}.
#---in
{	?shape 	sh:in 	?list.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i. 
		?i list:in ?list
	} => {
		?i :lPos ?list
	}.
	###########################
	{	?shape :targets ?i. 
		("Value is not in " ?list) string:concatenation ?message. 
		_:b log:notIncludes {?i :lPos ?list}
	} => {
		[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:InConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:resultMessage 				?message]
	}
}.
#------Logical Constraints
#---and
{	?shape 	sh:and 	?list.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i.   
		?list list:iterate (?index ?value).		 
		(?violation {?violation  sh:sourceShape ?value;
                                 sh:focusNode   ?i      } ?nlist) log:collectAllIn ?scope. 
	} => {
		?nlist ?i ?list.
	}.
    #################################
	{	?shape :targets ?i.   
		?list list:iterate (?index ?value).		 
		?pShape :wasPChildOf ?value.
		(?violation {?i ?pShape ?violation} ?nlist) log:collectAllIn ?scope. 
	} => {
		?nlist ?i ?list.
	}.
	#################################
    {   ?shape :targets ?i.   
        (?flist {?nlist ?i ?list. ?nlist list:first ?flist} ?vlist) log:collectAllIn ?scope. 
        ?vlist list:length ?vlength.
        ?vlength math:greaterThan 0
    } => {
        [ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:AndConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:detail						?vlist]
    }.
	#####################
	{	?shape :targets ?i.
		?list list:iterate (?index ?value) 
	} => {
		?value :targets ?i
	}
}.


#---or
{	?shape 	sh:or 	?list.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i.   
		?list list:iterate (?index ?value).		 
		(?violation {?violation  sh:sourceShape ?value;
                                 sh:focusNode   ?i      } ?nlist) log:collectAllIn ?scope. 
	} => {
		?nlist ?i ?list.
	}.
	#################################
	{	?shape :targets ?i.   
		?list list:iterate (?index ?value).		 
		?pShape :wasPChildOf ?value.
		(?violation {?i ?pShape ?violation} ?nlist) log:collectAllIn ?scope. 
	} => {
		?nlist ?i ?list.
	}.
    #################################
    {   ?shape :targets ?i.   
        (?flist {?nlist ?i ?list. ?nlist list:first ?flist} ?vlist) log:collectAllIn ?scope. 
        ?vlist list:length ?vlength.
        ?list list:length ?llength.
        ?vlength math:equalTo ?llength
    } => {
        [ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:OrConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:detail						?vlist]
    }.
	#####################
	{	?shape :targets ?i.
		?list list:iterate (?index ?value) 
	} => {
		?value :targets ?i
	}
}.
#---xone
{	?shape 	sh:xone 	?list.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i.   
		?list list:iterate (?index ?value).		 
		(?violation {?violation  sh:sourceShape ?value;
                                 sh:focusNode   ?i      } ?nlist) log:collectAllIn ?scope. 
	} => {
		?nlist ?i ?list.
	}.
	#################################
	{	?shape :targets ?i.   
		?list list:iterate (?index ?value).		 
		?pShape :wasPChildOf ?value.
		(?violation {?i ?pShape ?violation} ?nlist) log:collectAllIn ?scope. 
	} => {
		?nlist ?i ?list.
	}.
    #################################
    {   ?shape :targets ?i.   
        (?flist {?nlist ?i ?list. ?nlist list:first ?flist} ?vlist) log:collectAllIn ?scope. 
        ?vlist list:length ?vlength.
        ?list list:length ?llength.
        ?vlength math:equalTo ?llength
    } => {
        [ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:XoneConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:detail						?vlist]
    }.
	#################################
    {   ?shape :targets ?i.   
        (?flist {?nlist ?i ?list. ?nlist list:first ?flist} ?vlist) log:collectAllIn ?scope. 
        ?vlist list:length ?vlength.
        ?list list:length ?llength.
        (?llength -1) math:sum ?mllength.
        ?vlength math:lessThan ?mllength
    } => {
        [ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:XoneConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:detail						?vlist]
    }.
	#####################
	{	?shape :targets ?i.
		?list list:iterate (?index ?value) 
	} => {
		?value :targets ?i
	}
}.
#---closed
{	?shape 	sh:closed true.
	_:b log:notIncludes {?shape sh:path _:egal}.
    _:b log:notIncludes {?shape sh:ignoredProperties ?list}.
    (?props {?shape	sh:property ?value.
             ?value	sh:path   	?props      } ?plist) log:collectAllIn ?scope.
} => {
	{	?shape :targets ?i.
    	?i ?tprop ?egal.
    	?plist list:member ?tprop.
    }=>{
      	?plist ?i ?tprop
    }.
  ########################
  	{	?shape :targets ?i.
    	?i ?tprop ?egal.
    	_:b log:notIncludes {?plist ?i ?tprop}
    }=>{
      	[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:ClosedConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?egal;
			sh:resultPath 					?tprop]
   	}
}.
################################################################
{	?shape 	sh:closed true;
    		sh:ignoredProperties ?list.
	_:b log:notIncludes {?shape sh:path _:egal}.
    (?props {?shape	sh:property ?value.
             ?value	sh:path   	?props      } ?vplist) log:collectAllIn ?scope.
    (?vplist ?list) list:append ?plist.
} => {
	{	?shape :targets ?i.
    	?i ?tprop ?egal.
    	?plist list:member ?tprop.
    }=>{
      	?plist ?i ?tprop
    }.
  ########################
  	{	?shape :targets ?i.
    	?i ?tprop ?egal.
    	_:b log:notIncludes {?plist ?i  ?tprop}
    }=>{
      	[ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:ClosedConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?egal;
			sh:resultPath 					?tprop;]
   	} 
}.