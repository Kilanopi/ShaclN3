@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix : <http://example.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .


#---not
{	?shape 	sh:not 		?vshape.
	_:b log:notIncludes {?shape sh:path _:egal}
} => {
	{	?shape :targets ?i.   	 
		(?violation {?violation  sh:sourceShape ?vshape;
                                 sh:focusNode   ?i      } ?nlist) log:collectAllIn ?scope. 
	} => {
		?nlist ?i ?list.
	}.
    #################################
	{	?shape :targets ?i.   	 
		?pShape :wasPChildOf ?value.
		(?violation {?i ?vShape ?violation} ?nlist) log:collectAllIn ?scope. 
	} => {
		?nlist ?i ?list.
	}.
	#################################
    {   ?shape :targets ?i.
		("Value does have shape " ?vshape) string:concatenation ?message.
        (?flist {?nlist ?i ?list. ?nlist list:first ?flist} ?vlist) log:collectAllIn ?scope. 
        ?vlist list:length ?vlength.
        ?vlength math:lessThan 1
    } => {
        [ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:AndConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?i;
			sh:detail						?vlist;
			sh:resultMessage				?message]
    }.
	#####################
	{	?shape	:targets ?i.
	} => {
		?vshape :targets ?i;
	}
}.
####################################
{	?shape 	sh:path 	?prop; 
			sh:not 		?vshape
} => {
	{	?shape :targets ?i.
		?i ?prop ?toTest.	 
		(?violation {?violation  sh:sourceShape ?vshape;
                                 sh:focusNode   ?toTest} ?nlist) log:collectAllIn ?scope. 
	} => {
		?nlist ?toTest ?list.
	}.
    #################################
	{	?shape :targets ?i.
		?i ?prop ?toTest.
		?pShape :wasPChildOf ?value.
		(?violation {?toTest ?vShape ?violation} ?nlist) log:collectAllIn ?scope. 
	} => {
		?nlist ?toTest ?list.
	}.
	#################################
    {   ?shape :targets ?i.
		?i ?prop ?toTest.
		("Value does have shape " ?vshape) string:concatenation ?message.
        (?flist {?nlist ?toTest ?list. ?nlist list:first ?flist} ?vlist) log:collectAllIn ?scope. 
        ?vlist list:length ?vlength.
        ?vlength math:lessThan 1
    } => {
        [ 	a 								sh:ValidationResult; 
			sh:resultSeverity 				sh:Violation; 
			sh:sourceConstraintComponent 	sh:AndConstraintComponent; 
			sh:sourceShape 					?shape; 
			sh:focusNode 					?i; 
			sh:value 						?toTest;
			sh:detail						?vlist;
			sh:resultMessage				?message]
    }.
	#####################
	{	?shape	:targets ?i.
		?i ?prop ?toTest.	
	} => {
		?vshape :targets ?toTest;
	}
}.